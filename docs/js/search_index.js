var search_data = {"index":{"searchIndex":["solanarb","client","keypair","utils","devnet","instructiontype","mainnet","testnet","account_subscribe()","account_unsubscribe()","base58_decode()","base58_encode()","base64_decode()","base64_encode()","block_subscribe()","block_unsubscribe()","from_secret_key()","generate()","get_account_info()","get_balance()","get_block()","get_block_commitment()","get_block_height()","get_block_production()","get_block_time()","get_blocks()","get_blocks_with_limit()","get_cluster_nodes()","get_epoch_info()","get_epoch_schedule()","get_fee_for_message()","get_first_available_block()","get_genesis_hash()","get_health()","get_highest_snapshot_slot()","get_identity()","get_inflation_governor()","get_inflation_rate()","get_inflation_reward()","get_largest_accounts()","get_latest_blockhash()","get_leader_schedule()","get_max_retransmit_slot()","get_max_shred_insert_slot()","get_minimum_balance_for_rent_exemption()","get_multiple_accounts()","get_program_accounts()","get_recent_performance_samples()","get_recent_prioritization_fees()","get_signature_statuses()","get_signatures_for_address()","get_slot()","get_slot_leader()","get_slot_leaders()","get_stake_activation()","get_stake_minimum_delegation()","get_supply()","get_token_account_balance()","get_token_accounts_by_delegate()","get_token_accounts_by_owner()","get_token_largest_accounts()","get_token_supply()","get_transaction()","get_transaction_count()","get_version()","get_vote_accounts()","handle_response_http()","is_blockhash_valid()","load_from_json()","logs_subscribe()","logs_unsubscribe()","minimum_ledger_slot()","new()","new()","program_subscribe()","program_unsubscribe()","public_key_base58()","request_airdrop()","request_http()","request_ws()","root_subscribe()","root_unsubscribe()","save_to_json()","secret_key_base58()","send_transaction()","signature_subscribe()","signature_unsubscribe()","simulate_transaction()","slot_subscribe()","slot_unsubscribe()","slots_updates_subscribe()","slots_updates_unsubscribe()","vote_subscribe()","vote_unsubscribe()","gemfile","gemfile.lock","license","readme","build.sh"],"longSearchIndex":["solanarb","solanarb::client","solanarb::keypair","solanarb::utils","solanarb::utils::devnet","solanarb::utils::instructiontype","solanarb::utils::mainnet","solanarb::utils::testnet","solanarb::client#account_subscribe()","solanarb::client#account_unsubscribe()","solanarb::utils::base58_decode()","solanarb::utils::base58_encode()","solanarb::utils::base64_decode()","solanarb::utils::base64_encode()","solanarb::client#block_subscribe()","solanarb::client#block_unsubscribe()","solanarb::keypair::from_secret_key()","solanarb::keypair::generate()","solanarb::client#get_account_info()","solanarb::client#get_balance()","solanarb::client#get_block()","solanarb::client#get_block_commitment()","solanarb::client#get_block_height()","solanarb::client#get_block_production()","solanarb::client#get_block_time()","solanarb::client#get_blocks()","solanarb::client#get_blocks_with_limit()","solanarb::client#get_cluster_nodes()","solanarb::client#get_epoch_info()","solanarb::client#get_epoch_schedule()","solanarb::client#get_fee_for_message()","solanarb::client#get_first_available_block()","solanarb::client#get_genesis_hash()","solanarb::client#get_health()","solanarb::client#get_highest_snapshot_slot()","solanarb::client#get_identity()","solanarb::client#get_inflation_governor()","solanarb::client#get_inflation_rate()","solanarb::client#get_inflation_reward()","solanarb::client#get_largest_accounts()","solanarb::client#get_latest_blockhash()","solanarb::client#get_leader_schedule()","solanarb::client#get_max_retransmit_slot()","solanarb::client#get_max_shred_insert_slot()","solanarb::client#get_minimum_balance_for_rent_exemption()","solanarb::client#get_multiple_accounts()","solanarb::client#get_program_accounts()","solanarb::client#get_recent_performance_samples()","solanarb::client#get_recent_prioritization_fees()","solanarb::client#get_signature_statuses()","solanarb::client#get_signatures_for_address()","solanarb::client#get_slot()","solanarb::client#get_slot_leader()","solanarb::client#get_slot_leaders()","solanarb::client#get_stake_activation()","solanarb::client#get_stake_minimum_delegation()","solanarb::client#get_supply()","solanarb::client#get_token_account_balance()","solanarb::client#get_token_accounts_by_delegate()","solanarb::client#get_token_accounts_by_owner()","solanarb::client#get_token_largest_accounts()","solanarb::client#get_token_supply()","solanarb::client#get_transaction()","solanarb::client#get_transaction_count()","solanarb::client#get_version()","solanarb::client#get_vote_accounts()","solanarb::client#handle_response_http()","solanarb::client#is_blockhash_valid()","solanarb::keypair::load_from_json()","solanarb::client#logs_subscribe()","solanarb::client#logs_unsubscribe()","solanarb::client#minimum_ledger_slot()","solanarb::client::new()","solanarb::keypair::new()","solanarb::client#program_subscribe()","solanarb::client#program_unsubscribe()","solanarb::keypair#public_key_base58()","solanarb::client#request_airdrop()","solanarb::client#request_http()","solanarb::client#request_ws()","solanarb::client#root_subscribe()","solanarb::client#root_unsubscribe()","solanarb::keypair#save_to_json()","solanarb::keypair#secret_key_base58()","solanarb::client#send_transaction()","solanarb::client#signature_subscribe()","solanarb::client#signature_unsubscribe()","solanarb::client#simulate_transaction()","solanarb::client#slot_subscribe()","solanarb::client#slot_unsubscribe()","solanarb::client#slots_updates_subscribe()","solanarb::client#slots_updates_unsubscribe()","solanarb::client#vote_subscribe()","solanarb::client#vote_unsubscribe()","","","","",""],"info":[["SolanaRB","","SolanaRB.html","",""],["SolanaRB::Client","","SolanaRB/Client.html","","<p>Client class for interacting with the Solana JSON RPC API over HTTP and WS.\n"],["SolanaRB::Keypair","","SolanaRB/Keypair.html","","<p>The Keypair class represents a keypair for signing transactions on the Solana blockchain.\n"],["SolanaRB::Utils","","SolanaRB/Utils.html","","<p>The Utils module provides utility methods and constants for interacting with the Solana blockchain.\n"],["SolanaRB::Utils::DEVNET","","SolanaRB/Utils/DEVNET.html","","<p>Endpoints for the devnet.\n"],["SolanaRB::Utils::InstructionType","","SolanaRB/Utils/InstructionType.html","","<p>Instruction types for Solana transactions.\n"],["SolanaRB::Utils::MAINNET","","SolanaRB/Utils/MAINNET.html","","<p>Endpoints for the mainnet.\n"],["SolanaRB::Utils::TESTNET","","SolanaRB/Utils/TESTNET.html","","<p>Endpoints for the testnet.\n"],["account_subscribe","SolanaRB::Client","SolanaRB/Client.html#method-i-account_subscribe","(pubkey, options = {}, &block)","<p>Subscribes to account changes.\n<p>@param [String] pubkey The public key of the account. @param [Hash] options …\n"],["account_unsubscribe","SolanaRB::Client","SolanaRB/Client.html#method-i-account_unsubscribe","(subscription_id, &block)","<p>Unsubscribes from account changes.\n<p>@param [Integer] subscription_id The subscription ID. @yield [Object] …\n"],["base58_decode","SolanaRB::Utils","SolanaRB/Utils.html#method-c-base58_decode","(base58)","<p>Decodes a Base58 string into a byte array.\n<p>@param [String] base58 The Base58 string to decode. @return …\n"],["base58_encode","SolanaRB::Utils","SolanaRB/Utils.html#method-c-base58_encode","(bytes)","<p>Encodes a byte array into a Base58 string.\n<p>@param [String] bytes The byte array to encode. @return [String] …\n"],["base64_decode","SolanaRB::Utils","SolanaRB/Utils.html#method-c-base64_decode","(base64)","<p>Decodes a Base64 string into a byte array.\n<p>@param [String] base64 The Base64 string to decode. @return …\n"],["base64_encode","SolanaRB::Utils","SolanaRB/Utils.html#method-c-base64_encode","(bytes)","<p>Encodes a byte array into a Base64 string.\n<p>@param [String] bytes The byte array to encode. @return [String] …\n"],["block_subscribe","SolanaRB::Client","SolanaRB/Client.html#method-i-block_subscribe","(options = {}, &block)","<p>Subscribes to new blocks.\n<p>@param [Hash] options Optional parameters for the subscription. @yield [Object] …\n"],["block_unsubscribe","SolanaRB::Client","SolanaRB/Client.html#method-i-block_unsubscribe","(subscription_id, &block)","<p>Unsubscribes from new blocks.\n<p>@param [Integer] subscription_id The subscription ID. @yield [Object] The …\n"],["from_secret_key","SolanaRB::Keypair","SolanaRB/Keypair.html#method-c-from_secret_key","(secret_key)","<p>Creates a Keypair from a provided secret key.\n<p>@param [String] secret_key The secret key in binary format. …\n"],["generate","SolanaRB::Keypair","SolanaRB/Keypair.html#method-c-generate","()","<p>Generates a new Keypair.\n<p>@return [Keypair] A new Keypair instance.\n"],["get_account_info","SolanaRB::Client","SolanaRB/Client.html#method-i-get_account_info","(pubkey, options = {})","<p>Retrieves account information for a given public key.\n<p>@param [String] pubkey The public key of the account. …\n"],["get_balance","SolanaRB::Client","SolanaRB/Client.html#method-i-get_balance","(pubkey, options = {})","<p>Retrieves the balance for a given public key.\n<p>@param [String] pubkey The public key of the account. @param …\n"],["get_block","SolanaRB::Client","SolanaRB/Client.html#method-i-get_block","(slot_number, options = {})","<p>Retrieves information about a specific block.\n<p>@param [Integer] slot_number The slot number of the block. …\n"],["get_block_commitment","SolanaRB::Client","SolanaRB/Client.html#method-i-get_block_commitment","(slot_number, options = {})","<p>Retrieves block commitment information for a specific block.\n<p>@param [Integer] slot_number The slot number …\n"],["get_block_height","SolanaRB::Client","SolanaRB/Client.html#method-i-get_block_height","(options = {})","<p>Retrieves the current block height.\n<p>@param [Hash] options Optional parameters for the request. @return …\n"],["get_block_production","SolanaRB::Client","SolanaRB/Client.html#method-i-get_block_production","(options = {})","<p>Retrieves block production information.\n<p>@param [Hash] options Optional parameters for the request. @return …\n"],["get_block_time","SolanaRB::Client","SolanaRB/Client.html#method-i-get_block_time","(slot_number, options = {})","<p>Retrieves the estimated production time of a specific block.\n<p>@param [Integer] slot_number The slot number …\n"],["get_blocks","SolanaRB::Client","SolanaRB/Client.html#method-i-get_blocks","(start_slot, end_slot, options = {})","<p>Retrieves a list of confirmed blocks between two slot numbers.\n<p>@param [Integer] start_slot The start slot …\n"],["get_blocks_with_limit","SolanaRB::Client","SolanaRB/Client.html#method-i-get_blocks_with_limit","(start_slot, limit, options = {})","<p>Retrieves a list of confirmed blocks starting from a given slot number with a limit on the number of …\n"],["get_cluster_nodes","SolanaRB::Client","SolanaRB/Client.html#method-i-get_cluster_nodes","(options = {})","<p>Retrieves the list of cluster nodes.\n<p>@param [Hash] options Optional parameters for the request. @return …\n"],["get_epoch_info","SolanaRB::Client","SolanaRB/Client.html#method-i-get_epoch_info","(options = {})","<p>Retrieves epoch information.\n<p>@param [Hash] options Optional parameters for the request. @return [Hash] …\n"],["get_epoch_schedule","SolanaRB::Client","SolanaRB/Client.html#method-i-get_epoch_schedule","(options = {})","<p>Retrieves the epoch schedule.\n<p>@param [Hash] options Optional parameters for the request. @return [Hash] …\n"],["get_fee_for_message","SolanaRB::Client","SolanaRB/Client.html#method-i-get_fee_for_message","(message, options = {})","<p>Retrieves the fee for a given message.\n<p>@param [String] message The message for which the fee is to be …\n"],["get_first_available_block","SolanaRB::Client","SolanaRB/Client.html#method-i-get_first_available_block","(options = {})","<p>Retrieves the slot of the first available block.\n<p>@param [Hash] options Optional parameters for the request. …\n"],["get_genesis_hash","SolanaRB::Client","SolanaRB/Client.html#method-i-get_genesis_hash","(options = {})","<p>Retrieves the genesis hash.\n<p>@param [Hash] options Optional parameters for the request. @return [String] …\n"],["get_health","SolanaRB::Client","SolanaRB/Client.html#method-i-get_health","(options = {})","<p>Checks the health of the node.\n<p>@param [Hash] options Optional parameters for the request. @return [String] …\n"],["get_highest_snapshot_slot","SolanaRB::Client","SolanaRB/Client.html#method-i-get_highest_snapshot_slot","(options = {})","<p>Retrieves the highest snapshot slot.\n<p>@param [Hash] options Optional parameters for the request. @return …\n"],["get_identity","SolanaRB::Client","SolanaRB/Client.html#method-i-get_identity","(options = {})","<p>Retrieves the identity of the node.\n<p>@param [Hash] options Optional parameters for the request. @return …\n"],["get_inflation_governor","SolanaRB::Client","SolanaRB/Client.html#method-i-get_inflation_governor","(options = {})","<p>Retrieves the current inflation governor settings.\n<p>@param [Hash] options Optional parameters for the request. …\n"],["get_inflation_rate","SolanaRB::Client","SolanaRB/Client.html#method-i-get_inflation_rate","(options = {})","<p>Retrieves the current inflation rate.\n<p>@param [Hash] options Optional parameters for the request. @return …\n"],["get_inflation_reward","SolanaRB::Client","SolanaRB/Client.html#method-i-get_inflation_reward","(addresses, options = {})","<p>Retrieves the inflation reward for a given list of addresses.\n<p>@param [Array&lt;String&gt;] addresses  …\n"],["get_largest_accounts","SolanaRB::Client","SolanaRB/Client.html#method-i-get_largest_accounts","(options = {})","<p>Retrieves the largest accounts.\n<p>@param [Hash] options Optional parameters for the request. @return [Array&lt;Hash&gt;] …\n"],["get_latest_blockhash","SolanaRB::Client","SolanaRB/Client.html#method-i-get_latest_blockhash","(options = {})","<p>Retrieves the latest blockhash.\n<p>@param [Hash] options Optional parameters for the request. @return [Hash] …\n"],["get_leader_schedule","SolanaRB::Client","SolanaRB/Client.html#method-i-get_leader_schedule","(options = {})","<p>Retrieves the leader schedule.\n<p>@param [Hash] options Optional parameters for the request. @return [Hash] …\n"],["get_max_retransmit_slot","SolanaRB::Client","SolanaRB/Client.html#method-i-get_max_retransmit_slot","(options = {})","<p>Retrieves the maximum retransmit slot.\n<p>@param [Hash] options Optional parameters for the request. @return …\n"],["get_max_shred_insert_slot","SolanaRB::Client","SolanaRB/Client.html#method-i-get_max_shred_insert_slot","(options = {})","<p>Retrieves the maximum shred insert slot.\n<p>@param [Hash] options Optional parameters for the request. @return …\n"],["get_minimum_balance_for_rent_exemption","SolanaRB::Client","SolanaRB/Client.html#method-i-get_minimum_balance_for_rent_exemption","(data_length, options = {})","<p>Retrieves the minimum balance required for rent exemption for a given data length.\n<p>@param [Integer] data_length …\n"],["get_multiple_accounts","SolanaRB::Client","SolanaRB/Client.html#method-i-get_multiple_accounts","(pubkeys, options = {})","<p>Retrieves information for multiple accounts.\n<p>@param [Array&lt;String&gt;] pubkeys The list of public keys. …\n"],["get_program_accounts","SolanaRB::Client","SolanaRB/Client.html#method-i-get_program_accounts","(pubkey, options = {})","<p>Retrieves information for accounts owned by a specific program.\n<p>@param [String] pubkey The public key …\n"],["get_recent_performance_samples","SolanaRB::Client","SolanaRB/Client.html#method-i-get_recent_performance_samples","(options = {})","<p>Retrieves recent performance samples.\n<p>@param [Hash] options Optional parameters for the request. @return …\n"],["get_recent_prioritization_fees","SolanaRB::Client","SolanaRB/Client.html#method-i-get_recent_prioritization_fees","(options = {})","<p>Retrieves recent prioritization fees.\n<p>@param [Hash] options Optional parameters for the request. @return …\n"],["get_signature_statuses","SolanaRB::Client","SolanaRB/Client.html#method-i-get_signature_statuses","(signatures, options = {})","<p>Retrieves the status of given transaction signatures.\n<p>@param [Array&lt;String&gt;] signatures The list …\n"],["get_signatures_for_address","SolanaRB::Client","SolanaRB/Client.html#method-i-get_signatures_for_address","(address, options = {})","<p>Retrieves the signatures for a given address.\n<p>@param [String] address The address for which to retrieve …\n"],["get_slot","SolanaRB::Client","SolanaRB/Client.html#method-i-get_slot","(options = {})","<p>Retrieves the current slot.\n<p>@param [Hash] options Optional parameters for the request. @return [Integer] …\n"],["get_slot_leader","SolanaRB::Client","SolanaRB/Client.html#method-i-get_slot_leader","(options = {})","<p>Retrieves the current slot leader.\n<p>@param [Hash] options Optional parameters for the request. @return …\n"],["get_slot_leaders","SolanaRB::Client","SolanaRB/Client.html#method-i-get_slot_leaders","(start_slot, limit, options = {})","<p>Retrieves the slot leaders starting from a given slot with a limit on the number of leaders.\n<p>@param [Integer] …\n"],["get_stake_activation","SolanaRB::Client","SolanaRB/Client.html#method-i-get_stake_activation","(pubkey, options = {})","<p>Retrieves the stake activation information for a given public key.\n<p>@param [String] pubkey The public key …\n"],["get_stake_minimum_delegation","SolanaRB::Client","SolanaRB/Client.html#method-i-get_stake_minimum_delegation","(options = {})","<p>Retrieves the minimum delegation for a stake account.\n<p>@param [Hash] options Optional parameters for the …\n"],["get_supply","SolanaRB::Client","SolanaRB/Client.html#method-i-get_supply","(options = {})","<p>Retrieves the supply information.\n<p>@param [Hash] options Optional parameters for the request. @return [Hash] …\n"],["get_token_account_balance","SolanaRB::Client","SolanaRB/Client.html#method-i-get_token_account_balance","(pubkey, options = {})","<p>Retrieves the token balance for a given token account.\n<p>@param [String] pubkey The public key of the token …\n"],["get_token_accounts_by_delegate","SolanaRB::Client","SolanaRB/Client.html#method-i-get_token_accounts_by_delegate","(delegate, opts = {}, options = {})","<p>Retrieves token accounts by delegate.\n<p>@param [String] delegate The delegate address. @param [Hash] opts …\n"],["get_token_accounts_by_owner","SolanaRB::Client","SolanaRB/Client.html#method-i-get_token_accounts_by_owner","(owner, opts = {}, options = {})","<p>Retrieves token accounts by owner.\n<p>@param [String] owner The owner address. @param [Hash] opts Additional …\n"],["get_token_largest_accounts","SolanaRB::Client","SolanaRB/Client.html#method-i-get_token_largest_accounts","(pubkey, options = {})","<p>Retrieves the largest accounts for a given token.\n<p>@param [String] pubkey The public key of the token. …\n"],["get_token_supply","SolanaRB::Client","SolanaRB/Client.html#method-i-get_token_supply","(pubkey, options = {})","<p>Retrieves the supply of a given token.\n<p>@param [String] pubkey The public key of the token. @param [Hash] …\n"],["get_transaction","SolanaRB::Client","SolanaRB/Client.html#method-i-get_transaction","(signature, options = {})","<p>Retrieves transaction details for a given signature.\n<p>@param [String] signature The transaction signature. …\n"],["get_transaction_count","SolanaRB::Client","SolanaRB/Client.html#method-i-get_transaction_count","(options = {})","<p>Retrieves the total number of transactions processed by the network.\n<p>@param [Hash] options Optional parameters …\n"],["get_version","SolanaRB::Client","SolanaRB/Client.html#method-i-get_version","()","<p>Retrieves the current version of the Solana software.\n<p>@return [Hash] The current version information. …\n"],["get_vote_accounts","SolanaRB::Client","SolanaRB/Client.html#method-i-get_vote_accounts","(options = {})","<p>Retrieves the list of vote accounts.\n<p>@param [Hash] options Optional parameters for the request. @return …\n"],["handle_response_http","SolanaRB::Client","SolanaRB/Client.html#method-i-handle_response_http","(response)","<p>Handles the API response, checking for success and parsing the result.\n<p>@param [Faraday::Response] response …\n"],["is_blockhash_valid","SolanaRB::Client","SolanaRB/Client.html#method-i-is_blockhash_valid","(blockhash, options = {})","<p>Checks if a given blockhash is valid.\n<p>@param [String] blockhash The blockhash to check. @param [Hash] …\n"],["load_from_json","SolanaRB::Keypair","SolanaRB/Keypair.html#method-c-load_from_json","(file_path)","<p>Loads a keypair from a JSON file.\n<p>The file must contain the public and secret keys in Base58 format.  …\n"],["logs_subscribe","SolanaRB::Client","SolanaRB/Client.html#method-i-logs_subscribe","(filter, options = {}, &block)","<p>Subscribes to log messages.\n<p>@param [String, Hash] filter The filter for log messages (e.g., a public key …\n"],["logs_unsubscribe","SolanaRB::Client","SolanaRB/Client.html#method-i-logs_unsubscribe","(subscription_id, &block)","<p>Unsubscribes from log messages.\n<p>@param [Integer] subscription_id The subscription ID. @yield [Object] …\n"],["minimum_ledger_slot","SolanaRB::Client","SolanaRB/Client.html#method-i-minimum_ledger_slot","(options = {})","<p>Retrieves the minimum ledger slot.\n<p>@param [Hash] options Optional parameters for the request. @return …\n"],["new","SolanaRB::Client","SolanaRB/Client.html#method-c-new","(api_endpoint = SolanaRB::Utils::MAINNET, api_key = nil)","<p>Initializes a new Client.\n<p>@param [String, nil] api_key Optional API key for authentication.\n"],["new","SolanaRB::Keypair","SolanaRB/Keypair.html#method-c-new","(secret_key = nil)","<p>Initializes a new Keypair.\n<p>If a <code>secret_key</code> is provided, it must be 64 bytes long. The first 32 bytes are …\n"],["program_subscribe","SolanaRB::Client","SolanaRB/Client.html#method-i-program_subscribe","(pubkey, options = {}, &block)","<p>Subscribes to program changes.\n<p>@param [String] pubkey The public key of the program. @param [Hash] options …\n"],["program_unsubscribe","SolanaRB::Client","SolanaRB/Client.html#method-i-program_unsubscribe","(subscription_id, &block)","<p>Unsubscribes from program changes.\n<p>@param [Integer] subscription_id The subscription ID. @yield [Object] …\n"],["public_key_base58","SolanaRB::Keypair","SolanaRB/Keypair.html#method-i-public_key_base58","()","<p>Returns the public key for this keypair in Base58 format.\n<p>@return [String] The public key in Base58 format. …\n"],["request_airdrop","SolanaRB::Client","SolanaRB/Client.html#method-i-request_airdrop","(pubkey, lamports, options = {})","<p>Requests an airdrop to a given public key.\n<p>@param [String] pubkey The public key to receive the airdrop. …\n"],["request_http","SolanaRB::Client","SolanaRB/Client.html#method-i-request_http","(method, params = nil)","<p>Sends a JSON-RPC request to the Solana API.\n<p>@param [String] method The RPC method to call. @param [Array] …\n"],["request_ws","SolanaRB::Client","SolanaRB/Client.html#method-i-request_ws","(method, params = nil, &block)","<p>Sends a JSON-RPC request to the Solana API over WebSocket.\n<p>@param [String] method The RPC method to call. …\n"],["root_subscribe","SolanaRB::Client","SolanaRB/Client.html#method-i-root_subscribe","(&block)","<p>Subscribes to root changes.\n<p>@yield [Object] The response from the subscription.\n"],["root_unsubscribe","SolanaRB::Client","SolanaRB/Client.html#method-i-root_unsubscribe","(subscription_id, &block)","<p>Unsubscribes from root changes.\n<p>@param [Integer] subscription_id The subscription ID. @yield [Object] …\n"],["save_to_json","SolanaRB::Keypair","SolanaRB/Keypair.html#method-i-save_to_json","(file_path)","<p>Saves the keypair to a JSON file.\n<p>The public and secret keys are encoded in Base58 format before being …\n"],["secret_key_base58","SolanaRB::Keypair","SolanaRB/Keypair.html#method-i-secret_key_base58","()","<p>Returns the raw secret key for this keypair in Base58 format.\n<p>@return [String] The secret key in Base58 …\n"],["send_transaction","SolanaRB::Client","SolanaRB/Client.html#method-i-send_transaction","(transaction)","<p>Sends a transaction.\n<p>@param [Hash] transaction The transaction to send. @return [Hash] The response from …\n"],["signature_subscribe","SolanaRB::Client","SolanaRB/Client.html#method-i-signature_subscribe","(signature, options = {}, &block)","<p>Subscribes to signature status changes.\n<p>@param [String] signature The signature to monitor. @param [Hash] …\n"],["signature_unsubscribe","SolanaRB::Client","SolanaRB/Client.html#method-i-signature_unsubscribe","(subscription_id, &block)","<p>Unsubscribes from signature status changes.\n<p>@param [Integer] subscription_id The subscription ID. @yield …\n"],["simulate_transaction","SolanaRB::Client","SolanaRB/Client.html#method-i-simulate_transaction","(transaction, options = {})","<p>Simulates a transaction.\n<p>@param [Hash] transaction The transaction to simulate. @param [Hash] options …\n"],["slot_subscribe","SolanaRB::Client","SolanaRB/Client.html#method-i-slot_subscribe","(&block)","<p>Subscribes to slot changes.\n<p>@yield [Object] The response from the subscription.\n"],["slot_unsubscribe","SolanaRB::Client","SolanaRB/Client.html#method-i-slot_unsubscribe","(subscription_id, &block)","<p>Unsubscribes from slot changes.\n<p>@param [Integer] subscription_id The subscription ID. @yield [Object] …\n"],["slots_updates_subscribe","SolanaRB::Client","SolanaRB/Client.html#method-i-slots_updates_subscribe","(&block)","<p>Subscribes to slot updates.\n<p>@yield [Object] The response from the subscription.\n"],["slots_updates_unsubscribe","SolanaRB::Client","SolanaRB/Client.html#method-i-slots_updates_unsubscribe","(subscription_id, &block)","<p>Unsubscribes from slot updates.\n<p>@param [Integer] subscription_id The subscription ID. @yield [Object] …\n"],["vote_subscribe","SolanaRB::Client","SolanaRB/Client.html#method-i-vote_subscribe","(&block)","<p>Subscribes to vote updates.\n<p>@yield [Object] The response from the subscription.\n"],["vote_unsubscribe","SolanaRB::Client","SolanaRB/Client.html#method-i-vote_unsubscribe","(subscription_id, &block)","<p>Unsubscribes from vote updates.\n<p>@param [Integer] subscription_id The subscription ID. @yield [Object] …\n"],["Gemfile","","Gemfile.html","","<p>source ‘rubygems.org’\n<p>gemspec\n<p>group :development, :test do\n"],["Gemfile.lock","","Gemfile_lock.html","","<p>PATH\n\n<pre>remote: .\nspecs:\n  solana-ruby (0.1.0)\n    base58 (~&gt; 0.2.3)\n    csv (~&gt; 3.1)\n    ed25519 (~&gt; 1.3) ...</pre>\n"],["LICENSE","","LICENSE.html","","<p>MIT License\n<p>Copyright © 2024 Fabrice Renard\n<p>Permission is hereby granted, free of charge, to any person …\n"],["README","","README_md.html","","<p>solana-ruby\n<p>This Ruby gem provides a simple wrapper for interacting with the Solana RPC API. It allows …\n"],["build.sh","","build_sh.html","","<p>gem uninstall solana-ruby gem build solana-ruby.gemspec gem install solana-ruby-0.2.0.gem\n"]]}}